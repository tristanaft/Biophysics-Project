{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-1-cfacd920fbe7>:29: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  t = sp.arange(0.0, 450.0, 0.01)\n",
      "<ipython-input-1-cfacd920fbe7>:34: DeprecationWarning: scipy.exp is deprecated and will be removed in SciPy 2.0.0, use numpy.exp instead\n",
      "  return 0.1*(V+40.0)/(1.0 - sp.exp(-(V+40.0) / 10.0))\n",
      "<ipython-input-1-cfacd920fbe7>:38: DeprecationWarning: scipy.exp is deprecated and will be removed in SciPy 2.0.0, use numpy.exp instead\n",
      "  return 4.0*sp.exp(-(V+65.0) / 18.0)\n",
      "<ipython-input-1-cfacd920fbe7>:42: DeprecationWarning: scipy.exp is deprecated and will be removed in SciPy 2.0.0, use numpy.exp instead\n",
      "  return 0.07*sp.exp(-(V+65.0) / 20.0)\n",
      "<ipython-input-1-cfacd920fbe7>:46: DeprecationWarning: scipy.exp is deprecated and will be removed in SciPy 2.0.0, use numpy.exp instead\n",
      "  return 1.0/(1.0 + sp.exp(-(V+35.0) / 10.0))\n",
      "<ipython-input-1-cfacd920fbe7>:50: DeprecationWarning: scipy.exp is deprecated and will be removed in SciPy 2.0.0, use numpy.exp instead\n",
      "  return 0.01*(V+55.0)/(1.0 - sp.exp(-(V+55.0) / 10.0))\n",
      "<ipython-input-1-cfacd920fbe7>:54: DeprecationWarning: scipy.exp is deprecated and will be removed in SciPy 2.0.0, use numpy.exp instead\n",
      "  return 0.125*sp.exp(-(V+65) / 80.0)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scipy as sp\n",
    "import pylab as plt\n",
    "from scipy.integrate import odeint\n",
    "\n",
    "class HodgkinHuxley():\n",
    "    \"\"\"Full Hodgkin-Huxley Model implemented in Python\"\"\"\n",
    "\n",
    "    C_m  =   1.0\n",
    "    \"\"\"membrane capacitance, in uF/cm^2\"\"\"\n",
    "\n",
    "    g_Na = 120.0\n",
    "    \"\"\"Sodium (Na) maximum conductances, in mS/cm^2\"\"\"\n",
    "\n",
    "    g_K  =  36.0\n",
    "    \"\"\"Postassium (K) maximum conductances, in mS/cm^2\"\"\"\n",
    "\n",
    "    g_L  =   0.3\n",
    "    \"\"\"Leak maximum conductances, in mS/cm^2\"\"\"\n",
    "\n",
    "    E_Na =  50.0\n",
    "    \"\"\"Sodium (Na) Nernst reversal potentials, in mV\"\"\"\n",
    "\n",
    "    E_K  = -77.0\n",
    "    \"\"\"Postassium (K) Nernst reversal potentials, in mV\"\"\"\n",
    "\n",
    "    E_L  = -54.387\n",
    "    \"\"\"Leak Nernst reversal potentials, in mV\"\"\"\n",
    "\n",
    "    t = sp.arange(0.0, 450.0, 0.01)\n",
    "    \"\"\" The time to integrate over \"\"\"\n",
    "\n",
    "    def alpha_m(self, V):\n",
    "        \"\"\"Channel gating kinetics. Functions of membrane voltage\"\"\"\n",
    "        return 0.1*(V+40.0)/(1.0 - sp.exp(-(V+40.0) / 10.0))\n",
    "\n",
    "    def beta_m(self, V):\n",
    "        \"\"\"Channel gating kinetics. Functions of membrane voltage\"\"\"\n",
    "        return 4.0*sp.exp(-(V+65.0) / 18.0)\n",
    "\n",
    "    def alpha_h(self, V):\n",
    "        \"\"\"Channel gating kinetics. Functions of membrane voltage\"\"\"\n",
    "        return 0.07*sp.exp(-(V+65.0) / 20.0)\n",
    "\n",
    "    def beta_h(self, V):\n",
    "        \"\"\"Channel gating kinetics. Functions of membrane voltage\"\"\"\n",
    "        return 1.0/(1.0 + sp.exp(-(V+35.0) / 10.0))\n",
    "\n",
    "    def alpha_n(self, V):\n",
    "        \"\"\"Channel gating kinetics. Functions of membrane voltage\"\"\"\n",
    "        return 0.01*(V+55.0)/(1.0 - sp.exp(-(V+55.0) / 10.0))\n",
    "\n",
    "    def beta_n(self, V):\n",
    "        \"\"\"Channel gating kinetics. Functions of membrane voltage\"\"\"\n",
    "        return 0.125*sp.exp(-(V+65) / 80.0)\n",
    "\n",
    "    def I_Na(self, V, m, h):\n",
    "        \"\"\"\n",
    "        Membrane current (in uA/cm^2)\n",
    "        Sodium (Na = element name)\n",
    "\n",
    "        |  :param V:\n",
    "        |  :param m:\n",
    "        |  :param h:\n",
    "        |  :return:\n",
    "        \"\"\"\n",
    "        return self.g_Na * m**3 * h * (V - self.E_Na)\n",
    "\n",
    "    def I_K(self, V, n):\n",
    "        \"\"\"\n",
    "        Membrane current (in uA/cm^2)\n",
    "        Potassium (K = element name)\n",
    "\n",
    "        |  :param V:\n",
    "        |  :param h:\n",
    "        |  :return:\n",
    "        \"\"\"\n",
    "        return self.g_K  * n**4 * (V - self.E_K)\n",
    "    #  Leak\n",
    "    def I_L(self, V):\n",
    "        \"\"\"\n",
    "        Membrane current (in uA/cm^2)\n",
    "        Leak\n",
    "\n",
    "        |  :param V:\n",
    "        |  :param h:\n",
    "        |  :return:\n",
    "        \"\"\"\n",
    "        return self.g_L * (V - self.E_L)\n",
    "\n",
    "    def I_inj(self, t):\n",
    "        \"\"\"\n",
    "        External Current\n",
    "\n",
    "        |  :param t: time\n",
    "        |  :return: step up to 10 uA/cm^2 at t>100\n",
    "        |           step down to 0 uA/cm^2 at t>200\n",
    "        |           step up to 35 uA/cm^2 at t>300\n",
    "        |           step down to 0 uA/cm^2 at t>400\n",
    "        \"\"\"\n",
    "        return 10*(t>100) - 10*(t>200) + 35*(t>300) - 35*(t>400)\n",
    "\n",
    "    @staticmethod\n",
    "    def dALLdt(X, t, self):\n",
    "        \"\"\"\n",
    "        Integrate\n",
    "\n",
    "        |  :param X:\n",
    "        |  :param t:\n",
    "        |  :return: calculate membrane potential & activation variables\n",
    "        \"\"\"\n",
    "        V, m, h, n = X\n",
    "\n",
    "        dVdt = (self.I_inj(t) - self.I_Na(V, m, h) - self.I_K(V, n) - self.I_L(V)) / self.C_m\n",
    "        dmdt = self.alpha_m(V)*(1.0-m) - self.beta_m(V)*m\n",
    "        dhdt = self.alpha_h(V)*(1.0-h) - self.beta_h(V)*h\n",
    "        dndt = self.alpha_n(V)*(1.0-n) - self.beta_n(V)*n\n",
    "        return dVdt, dmdt, dhdt, dndt\n",
    "\n",
    "    def Main(self):\n",
    "        \"\"\"\n",
    "        Main demo for the Hodgkin Huxley neuron model\n",
    "        \"\"\"\n",
    "\n",
    "        X = odeint(self.dALLdt, [-65, 0.05, 0.6, 0.32], self.t, args=(self,))\n",
    "        V = X[:,0]\n",
    "        m = X[:,1]\n",
    "        h = X[:,2]\n",
    "        n = X[:,3]\n",
    "        ina = self.I_Na(V, m, h)\n",
    "        ik = self.I_K(V, n)\n",
    "        il = self.I_L(V)\n",
    "\n",
    "        plt.figure()\n",
    "\n",
    "        plt.subplot(4,1,1)\n",
    "        plt.title('Hodgkin-Huxley Neuron')\n",
    "        plt.plot(self.t, V, 'k')\n",
    "        plt.ylabel('V (mV)')\n",
    "\n",
    "        plt.subplot(4,1,2)\n",
    "        plt.plot(self.t, ina, 'c', label='$I_{Na}$')\n",
    "        plt.plot(self.t, ik, 'y', label='$I_{K}$')\n",
    "        plt.plot(self.t, il, 'm', label='$I_{L}$')\n",
    "        plt.ylabel('Current')\n",
    "        plt.legend()\n",
    "\n",
    "        plt.subplot(4,1,3)\n",
    "        plt.plot(self.t, m, 'r', label='m')\n",
    "        plt.plot(self.t, h, 'g', label='h')\n",
    "        plt.plot(self.t, n, 'b', label='n')\n",
    "        plt.ylabel('Gating Value')\n",
    "        plt.legend()\n",
    "\n",
    "        plt.subplot(4,1,4)\n",
    "        i_inj_values = [self.I_inj(t) for t in self.t]\n",
    "        plt.plot(self.t, i_inj_values, 'k')\n",
    "        plt.xlabel('t (ms)')\n",
    "        plt.ylabel('$I_{inj}$ ($\\\\mu{A}/cm^2$)')\n",
    "        plt.ylim(-1, 40)\n",
    "\n",
    "        plt.show()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    runner = HodgkinHuxley()\n",
    "    runner.Main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
